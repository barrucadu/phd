% Key texts

@article{jml,
  author = {Leavens, Gary T. and Baker, Albert L. and Ruby, Clyde},
  title = {Preliminary Design of JML: A Behavioral Interface Specification Language for Java},
  journal = {SIGSOFT Softw. Eng. Notes},
  issue_date = {May 2006},
  volume = {31},
  number = {3},
  month = may,
  year = {2006},
  pages = {1--38},
  numpages = {38},
  publisher = {ACM},
  address = {New York, NY, USA},

  annotation = {{A language for annotating (in comments) Java source
                  with contracts, which has proven to be quite
                  influential, for example \textsc{Frama-C} uses a
                  very similar language for C programs.}}
}

@inproceedings{bcsl,
  author    = {Burdy, Lilian and Pavlova, Mariela},
  title     = {{Java Bytecode Specification and Verification}},
  booktitle = {Proceedings of the 2006 ACM Symposium on Applied Computing},
  series    = {SAC '06},
  year      = {2006},
  location  = {Dijon, France},
  pages     = {1835--1839},
  numpages  = {5},
  acmid     = {1141708},
  publisher = {ACM},
  address   = {New York, NY, USA},

  annotation = {{A JML-inspired Design by Contract annotation logic
                  for Java bytecode. Intended to facilitate
                  proof-carrying code, but could be checked at
                  runtime, as JML often is.}}
}

@incollection{bml,
  year      = {2007},
  booktitle = {Fundamental Approaches to Software Engineering},
  volume    = {4422},
  series    = {Lecture Notes in Computer Science},
  title     = {{Preliminary Design of BML: A Behavioral Interface Specification Language for Java Bytecode}},
  publisher = {Springer Berlin Heidelberg},
  author    = {Burdy, Lilian and Huisman, Marieke and Pavlova, Mariela},
  pages     = {215-229},

  annotation = {{Follow-on work from BCSL, defining a format for storing the annotations in the bytecode.}}
}

@article{jcontractor,
  title     = {{jContractor: Bytecode instrumentation techniques for implementing design by contract in Java}},
  author    = {Abercrombie, Parker and Karaorman, Murat},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {70},
  number    = {4},
  pages     = {55--79},
  year      = {2002},
  publisher = {Elsevier},

  annotation = {{Uses on-the-fly bytecode instrumentation to implement
                  Design by Contract in Java, with contracts also
                  specified in Java.}}
}

@incollection{unified,
  title     = {A unified approach for static and runtime verification: framework and applications},
  author    = {Ahrendt, Wolfgang and Pace, Gordon J and Schneider, Gerardo},
  booktitle = {Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change},
  pages     = {312--326},
  year      = {2012},
  publisher = {Springer},

  annotation = {{A combination contract/trace approach which uses
                  static verification to reduce and simplify runtime
                  monitoring obligations.}}
}

% Interesting work

@article{statver,
  title     = {{Static verification of dynamically detected program invariants: Integrating Daikon and ESC/Java}},
  author    = {Nimmer, Jeremy W and Ernst, Michael D},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {55},
  number    = {2},
  pages     = {255--276},
  year      = {2001},
  publisher = {Elsevier},

  annotation = {Uses Daikon to extract likely invariants of programs
                  from sample runs and then attempts to prove
                  statically.}
}

@article{eres,
  title     = {Generating optimal monitors for extended regular expressions},
  author    = {Sen, Koushik and Ro{\c{s}}u, Grigore},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {89},
  number    = {2},
  pages     = {226--245},
  year      = {2003},
  publisher = {Elsevier},

  annotation = {Automatically deriving low-overhead monitors for trace properties.}
}

@article{compensate,
  title     = {Safer asynchronous runtime monitoring using compensations},
  author    = {Colombo, Christian and Pace, Gordon J and Abela, Patrick},
  journal   = {Formal Methods in System Design},
  volume    = {41},
  number    = {3},
  pages     = {269--294},
  year      = {2012},
  publisher = {Springer},

  annotation = {Uses asynchronous monitoring with the ability to roll
                  back incomplete transations to reduce overhead.}
}

% Background reading

@proceedings{rv01,
  title     = {{Runtime Verification (2001)}},
  booktitle = {Runtime Verification (2001)},
  volume    = 55,
  issue     = 2,
  series    = {Electronic Notes in Theoretical Computer Science},
  publisher = {Elsevier},
  address   = {Paris, France},
  year      = {2001},

  annotation = {The inaugural workshop on runtime verification.}
}

@article{eiffel,
  title     = {Eiffel: A language and environment for software engineering},
  author    = {Meyer, Bertrand},
  journal   = {Journal of Systems and Software},
  volume    = {8},
  number    = {3},
  pages     = {199--246},
  year      = {1988},
  publisher = {Elsevier},

  annotation = {Early OOP language, and the father of contracts.}
}

@article{rice,
  title     = {Classes of Recursively Enumerable Sets and Their Decision Problems},
  author    = {Rice, H. G.},
  journal   = {Transactions of the American Mathematical Society},
  volume    = {74},
  number    = {2},
  pages     = {pp. 358-366},
  abstract  = {},
  year      = {1953},
  publisher = {American Mathematical Society},

  annotation = {Proves that no general static analysis decision procedure can exist.}
}

@article{cspthy,
  author     = {Brookes, S. D. and Hoare, C. A. R. and Roscoe, A. W.},
  title      = {{A Theory of Communicating Sequential Processes}},
  journal    = {J. ACM},
  issue_date = {July 1984},
  volume     = {31},
  number     = {3},
  month      = jun,
  year       = {1984},
  pages      = {560--599},
  numpages   = {40},
  acmid      = {833},
  publisher  = {ACM},
  address    = {New York, NY, USA},

  annotation = {Defines the semantics of CSP and, most relevently here, traces.}
}

@article{valgrind,
  title     = {Valgrind: A program supervision framework},
  author    = {Nethercote, Nicholas and Seward, Julian},
  journal   = {Electronic notes in theoretical computer science},
  volume    = {89},
  number    = {2},
  pages     = {44--66},
  year      = {2003},
  publisher = {Elsevier},

  annotation = {{A now \textit{de facto} debugging tool for C, to find
                  memory errors.}}
}

@incollection{datarace,
  year      = {2012},
  volume    = {7186},
  series    = {Lecture Notes in Computer Science},
  editor    = {Khurshid, Sarfraz and Sen, Koushik},
  title     = {Dynamic Race Detection with LLVM Compiler},
  publisher = {Springer Berlin Heidelberg},
  author    = {Serebryany, Konstantin and Potapenko, Alexander and Iskhodzhanov, Timur and Vyukov, Dmitriy},
  pages     = {110-114},

  annotation = {{A runtime data race detection tool using LLVM to
                  instrument code.}}
}

@inproceedings{addrsan,
  title     = {AddressSanitizer: A Fast Address Sanity Checker.},
  author    = {Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitriy},
  booktitle = {USENIX Annual Technical Conference},
  pages     = {309--318},
  year      = {2012},

  annotation = {{A runtime memory error detection tool using LLVM to
                  instrument code.}}
}

@incollection{explicit,
  year      = {2014},
  booktitle = {Tests and Proofs},
  volume    = {8570},
  series    = {Lecture Notes in Computer Science},
  editor    = {Seidl, Martina and Tillmann, Nikolai},
  title     = {Explicit Assumptions - A Prenup for Marrying Static and Dynamic Program Verification},
  publisher = {Springer International Publishing},
  author    = {Kanig, Johannes and Chapman, Rod and Comar, Cyrille and Guitton, Jer√¥me and Moy, Yannick and Rees, Emyr},
  pages     = {142-157},

  annotation = {{Discusses the difficulty in combining verification
                  methods due to assumptions.}}
}

@techreport{ltl,
  author = {Andreas Bauer and Martin Leucker and Christian Schallhart},
  title = {{Runtime verification for LTL and TLTL}},
  year = {2007},

  annotation = {{Discusses using LTL and TLTL for runtime
                  verification, proposing algorithms for generating
                  monitors.}}
}

@article{hask,
  title     = {Runtime verification of concurrent Haskell programs},
  author    = {Stolz, Volker and Huch, Frank},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {113},
  pages     = {201--216},
  year      = {2005},
  publisher = {Elsevier},

  annotation = {{Implements a small framework for checking LTL
                  properties with regards to Haskell MVars (``Mutable
                  Variables'').}}
}

@article{efficient,
  title     = {Efficient automated trace analysis: Examples with morphine},
  author    = {Ducass{\'e}, Mireille and Jahier, Erwan},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {55},
  number    = {2},
  pages     = {118--133},
  year      = {2001},
  publisher = {Elsevier},

  annotation = {{Early paper on using traces for debugging running
                  programs.}}
}

@article{algol,
  author    = {Perlis, A. J. and Samelson, K.},
  title     = {{Preliminary Report: International Algebraic Language}},
  journal   = {Commun. ACM},
  volume    = {1},
  number    = {12},
  month     = dec,
  year      = {1958},
  pages     = {8--22},
  numpages  = {15},
  publisher = {ACM},

  annotation = {{First paper about the ALGOL language, which had a
                  simple type system.}}
}

@incollection{infer,
  title     = {{Infer: an automatic program verifier for memory safety of C programs}},
  author    = {Calcagno, Cristiano and Distefano, Dino},
  booktitle = {NASA Formal Methods},
  pages     = {459--465},
  year      = {2011},
  publisher = {Springer},

  annotation={{Uses separation logic and shape analysis to try to find
                  memory errors in C programs.}}
}

@inproceedings{racerx,
  title        = {RacerX: effective, static detection of race conditions and deadlocks},
  author       = {Engler, Dawson and Ashcraft, Ken},
  booktitle    = {ACM SIGOPS Operating Systems Review},
  volume       = {37},
  number       = {5},
  pages        = {237--252},
  year         = {2003},
  organization = {ACM},

  annotation = {{Uses flow analysis to identify potential deadlocks in programs}}
}