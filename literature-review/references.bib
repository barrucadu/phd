% Key texts

@online{jml,
  title   = {{The Java Modeling Language (JML)}},
  url     = {http://www.jmlspecs.org},
  urldate = {2014-11-07},

  annotation = {{A language for annoatting (in comments) Java source
                  with contracts, which has proven to be quite
                  influential, for example \textsc{Frama-C} uses a
                  very similar language for C programs.}}
}

@inproceedings{bcsl,
  author    = {Burdy, Lilian and Pavlova, Mariela},
  title     = {{Java Bytecode Specification and Verification}},
  booktitle = {Proceedings of the 2006 ACM Symposium on Applied Computing},
  series    = {SAC '06},
  year      = {2006},
  location  = {Dijon, France},
  pages     = {1835--1839},
  numpages  = {5},
  acmid     = {1141708},
  publisher = {ACM},
  address   = {New York, NY, USA},

  annotation = {{A JML-inspired Design by Contract annotation logic
                  for Java bytecode. Intended to facilitate
                  proof-carrying code, but could be checked at
                  runtime, as JML often is.}}
}

@incollection{bml,
  year      = {2007},
  booktitle = {Fundamental Approaches to Software Engineering},
  volume    = {4422},
  series    = {Lecture Notes in Computer Science},
  title     = {{Preliminary Design of BML: A Behavioral Interface Specification Language for Java Bytecode}},
  publisher = {Springer Berlin Heidelberg},
  author    = {Burdy, Lilian and Huisman, Marieke and Pavlova, Mariela},
  pages     = {215-229},

  annotation = {{Follow-on work from BCSL, defining a format for storing the annotations in the bytecode.}}
}

@article{jcontractor,
  title     = {{jContractor: Bytecode instrumentation techniques for implementing design by contract in Java}},
  author    = {Abercrombie, Parker and Karaorman, Murat},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {70},
  number    = {4},
  pages     = {55--79},
  year      = {2002},
  publisher = {Elsevier},

  annotation = {{Uses on-the-fly bytecode instrumentation to implement
                  Design by Contract in Java, with contracts also
                  specified in Java.}}
}

@inproceedings{ezcontract,
  title        = {{ezContract: Using Marker Library and Bytecode Instrumentation to Support Design by Contract in Java}},
  author       = {Cheng, Yu Chin and Chen, Chien-Tsun and Hsieh, Chin-Yun},
  booktitle    = {Software Engineering Conference, 2007. APSEC 2007. 14th Asia-Pacific},
  pages        = {502--509},
  year         = {2007},
  organization = {IEEE},

  annotation = {{Similar approach to jContractor, but allows contracts
                  to be specified within the methods they apply to,
                  using markers to delimit contracts from code.}}
}

@inproceedings{javamop,
  author    = {Jin, Dongyun and Meredith, Patrick O'Neil and Lee, Choonghwan and Ro\c{s}u, Grigore},
  title     = {{JavaMOP: Efficient Parametric Runtime Monitoring Framework}},
  booktitle = {Proceedings of the 34th International Conference on Software Engineering},
  series    = {ICSE '12},
  year      = {2012},
  location  = {Zurich, Switzerland},
  pages     = {1427--1430},
  numpages  = {4},
  acmid     = {2337436},
  publisher = {IEEE Press},
  address   = {Piscataway, NJ, USA},

  annotation = {{Summarises the design of JavaMOP, a monitoring
                  component for Java programs which is logic-agnostic,
                  in that users can plug in different logical
                  frameworks and still make use of JavaMOP as a
                  high-level interface to the target system.}}
}

% Interesting work

@article{statver,
  title     = {{Static verification of dynamically detected program invariants: Integrating Daikon and ESC/Java}},
  author    = {Nimmer, Jeremy W and Ernst, Michael D},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {55},
  number    = {2},
  pages     = {255--276},
  year      = {2001},
  publisher = {Elsevier},

  annotation = {Uses Daikon to extract likely invariants of programs
                  from sample runs and then attempts to prove
                  statically.}
}

@article{eres,
  title     = {Generating optimal monitors for extended regular expressions},
  author    = {Sen, Koushik and Ro{\c{s}}u, Grigore},
  journal   = {Electronic Notes in Theoretical Computer Science},
  volume    = {89},
  number    = {2},
  pages     = {226--245},
  year      = {2003},
  publisher = {Elsevier},

  annotation = {Automatically deriving low-overhead monitors for trace properties.}
}

@article{alto,
  title     = {Checking finite traces using alternating automata},
  author    = {Finkbeiner, Bernd and Sipma, Henny},
  journal   = {Formal Methods in System Design},
  volume    = {24},
  number    = {2},
  pages     = {101--127},
  year      = {2004},
  publisher = {Springer},

  annotation = {Uses alternating automata to check trace properties
                  specified with LTL.}
}

@article{compensate,
  title     = {Safer asynchronous runtime monitoring using compensations},
  author    = {Colombo, Christian and Pace, Gordon J and Abela, Patrick},
  journal   = {Formal Methods in System Design},
  volume    = {41},
  number    = {3},
  pages     = {269--294},
  year      = {2012},
  publisher = {Springer},

  annotation = {Uses asynchronous monitoring with the ability to roll
                  back incomplete transations to reduce overhead.}
}

@incollection{unified,
  title     = {A unified approach for static and runtime verification: framework and applications},
  author    = {Ahrendt, Wolfgang and Pace, Gordon J and Schneider, Gerardo},
  booktitle = {Leveraging Applications of Formal Methods, Verification and Validation. Technologies for Mastering Change},
  pages     = {312--326},
  year      = {2012},
  publisher = {Springer},

  annotation = {Uses static verification to reduce and simplify
                  runtime monitoring obligations.}
}

% Background reading

@proceedings{rv01,
  title     = {{Runtime Verification (2001)}},
  booktitle = {Runtime Verification (2001)},
  volume    = 55,
  issue     = 2,
  series    = {Electronic Notes in Theoretical Computer Science},
  publisher = {Elsevier},
  address   = {Paris, France},
  year      = {2001},

  annotation = {The inaugural workshop on runtime verification.}
}

@article{eiffel,
  title     = {Eiffel: A language and environment for software engineering},
  author    = {Meyer, Bertrand},
  journal   = {Journal of Systems and Software},
  volume    = {8},
  number    = {3},
  pages     = {199--246},
  year      = {1988},
  publisher = {Elsevier},

  annotation = {Early OOP language, and the father of contracts.}
}

@article{rice,
  title     = {Classes of Recursively Enumerable Sets and Their Decision Problems},
  author    = {Rice, H. G.},
  journal   = {Transactions of the American Mathematical Society},
  volume    = {74},
  number    = {2},
  pages     = {pp. 358-366},
  abstract  = {},
  year      = {1953},
  publisher = {American Mathematical Society},

  annotation = {Proves that no general static analysis decision procedure can exist.}
}

@article{cspthy,
  author     = {Brookes, S. D. and Hoare, C. A. R. and Roscoe, A. W.},
  title      = {{A Theory of Communicating Sequential Processes}},
  journal    = {J. ACM},
  issue_date = {July 1984},
  volume     = {31},
  number     = {3},
  month      = jun,
  year       = {1984},
  pages      = {560--599},
  numpages   = {40},
  acmid      = {833},
  publisher  = {ACM},
  address    = {New York, NY, USA},

  annotation = {Defines the semantics of CSP and, msot relevently here, traces.}
}
